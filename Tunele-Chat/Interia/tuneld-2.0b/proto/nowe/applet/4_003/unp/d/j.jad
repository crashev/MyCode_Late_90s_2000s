// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   j.java

package d;

import a.*;
import java.awt.*;
import java.awt.event.*;

// Referenced classes of package d:
//            x

class j extends i
    implements FocusListener, MouseListener, MouseMotionListener
{

    public void mouseClicked(MouseEvent mouseevent)
    {
    }

    public void mousePressed(MouseEvent mouseevent)
    {
        int i1;
        int j1;
        int k1;
        int l1;
        int j2;
        j2 = x.bd;
        i1 = mouseevent.getX();
        j1 = mouseevent.getY();
        k1 = -1;
        l1 = 0;
_L8:
        int i2 = 0;
_L4:
        i1;
_L9:
        5 + 20 * i2;
        JVM INSTR icmple 79;
           goto _L1 _L2
_L1:
        break MISSING_BLOCK_LABEL_35;
_L2:
        break MISSING_BLOCK_LABEL_79;
        if(i1 < 25 + 20 * i2 && j1 > 5 + 20 * l1 && j1 < 25 + 20 * l1)
            k1 = 4 * l1 + i2;
        ++i2;
        4;
_L6:
        JVM INSTR icmplt 24;
           goto _L3 _L4
_L3:
        ++l1;
        3;
        if(j2 != 0) goto _L6; else goto _L5
_L5:
        JVM INSTR icmplt 21;
           goto _L7 _L8
_L7:
        k1;
        if(j2 == 0)
        {
            if(k1 >= 0)
            {
                j.a('\001', "" + (char)k1);
                setVisible(false);
                k.a(false);
            }
            return;
        }
          goto _L9
    }

    public void mouseDragged(MouseEvent mouseevent)
    {
    }

    public j(l l1, d d1)
    {
        l = -1;
        j = l1;
        k = d1;
        setVisible(false);
        addFocusListener(this);
        addMouseListener(this);
        addMouseMotionListener(this);
    }

    public void mouseReleased(MouseEvent mouseevent)
    {
        if(j != null)
            j.requestFocus();
    }

    public void mouseMoved(MouseEvent mouseevent)
    {
        int i1;
        int j1;
        int k1;
        int i2;
        i2 = x.bd;
        i1 = mouseevent.getX();
        j1 = mouseevent.getY();
        k1 = 0;
_L8:
        int l1 = 0;
_L4:
        if(i1 <= 5 + 20 * l1 || i1 >= 25 + 20 * l1 || j1 <= 5 + 20 * k1 || j1 >= 25 + 20 * k1) goto _L2; else goto _L1
_L1:
        if(l != 4 * k1 + l1)
        {
            l = 4 * k1 + l1;
            repaint();
        }
        if(i2 == 0) goto _L3; else goto _L2
_L2:
        ++l1;
        4;
_L6:
        JVM INSTR icmplt 21;
           goto _L3 _L4
_L3:
        ++k1;
        3;
        if(i2 != 0) goto _L6; else goto _L5
_L5:
        JVM INSTR icmplt 18;
           goto _L7 _L8
_L7:
    }

    public void paint(Graphics g)
    {
        Graphics g1;
        int i1;
        int k1;
        k1 = x.bd;
        g1 = a(super.a, super.b);
        g1.setColor(Color.white);
        g1.fillRect(0, 0, super.a, super.b);
        r.a(g1, 0, 0, super.a, super.b, false);
        i1 = 0;
_L6:
        int j1 = 0;
_L2:
        g1.setColor(r.e[4 * i1 + j1]);
        g1.fillRect(5 + 20 * j1, 5 + 20 * i1, 15, 15);
_L7:
        if(l == 4 * i1 + j1)
        {
            g1.setColor(x.bb[15]);
            g1.drawRoundRect(2 + 20 * j1, 2 + 20 * i1, 20, 20, 3, 3);
        }
        ++j1;
        4;
_L4:
        JVM INSTR icmplt 59;
           goto _L1 _L2
_L1:
        ++i1;
        3;
        if(k1 != 0) goto _L4; else goto _L3
_L3:
        JVM INSTR icmplt 56;
           goto _L5 _L6
_L5:
        g.drawImage(b(), 0, 0, null);
        if(k1 == 0)
            return;
          goto _L7
    }

    public void setVisible(boolean flag)
    {
        super.setVisible(flag);
        if(flag)
            requestFocus();
    }

    public void a()
    {
        j = null;
        k = null;
        super.a();
    }

    public void focusLost(FocusEvent focusevent)
    {
        if(isVisible())
        {
            setVisible(false);
            k.a(false);
            j.requestFocus();
        }
    }

    public void mouseEntered(MouseEvent mouseevent)
    {
    }

    public void mouseExited(MouseEvent mouseevent)
    {
        l = -1;
        repaint();
    }

    public void focusGained(FocusEvent focusevent)
    {
    }

    l j;
    d k;
    int l;
}
