// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   k.java

package a;

import java.awt.*;
import java.awt.event.*;
import java.util.Hashtable;
import java.util.Vector;

// Referenced classes of package a:
//            i, x, r, v, 
//            y, a, t, s, 
//            w, q, u

public class k extends i
    implements AdjustmentListener, KeyListener, MouseListener, MouseMotionListener
{

    private void a(Graphics g1, int i1, int j1)
    {
        int k1;
        int l1;
        boolean flag1;
        flag1 = a.q;
        if(g1 != null)
        {
            I++;
            G.removeAllElements();
            if(I > 50)
            {
                I = 0;
                F.clear();
            }
        }
        if(H.size() == 0)
        {
            O = -1;
            return;
        }
        k1 = 0;
        l1 = i1;
        boolean flag = false;
        M.x = i1;
        M.y = j1;
        if(r && s)
            l1 = C;
        if(!flag1) goto _L2; else goto _L1
_L1:
        M.y += ((x)H.elementAt(k1++)).c;
_L2:
        if(M.y >= 0) goto _L4; else goto _L3
_L3:
        k1;
        H.size();
        if(flag1) goto _L6; else goto _L5
_L5:
        JVM INSTR icmplt 113;
           goto _L4 _L1
_L4:
        if(M.y > 0 && k1 > 0)
            M.y -= ((x)H.elementAt(--k1)).c;
        O = k1;
        if(!flag1) goto _L8; else goto _L7
_L7:
        x x1;
        int i2;
        int j2;
label0:
        {
            x1 = (x)H.elementAt(k1);
            x1.d = M.y;
            if(x1.b)
            {
                b(x1);
                return;
            }
            if(x1.a.charAt(0) == '\b')
            {
                g1.setColor(X);
                g1.fillRect(l1 - 2, M.y + 4, (super.a - 25 - l1) + 8, x1.c);
                i2 = 1;
                if(!flag1)
                    break label0;
            }
            i2 = 0;
        }
label1:
        {
            if(!r || E != k1)
                break label1;
            if(w)
            {
                g1.setColor(Color.red);
                g1.drawRect(2, M.y + 4, super.a - 22, x1.c - 1);
                if(!flag1)
                    break label1;
            }
            g1.setColor(X);
            g1.fillRect(2, M.y + 4, super.a - 20, x1.c);
        }
        k1++;
        if(r && s)
        {
            g1.setFont(a.r.a(0, 1, 1));
            g1.setColor(r.e[2]);
            g1.drawString(B, i1, M.y + S);
        }
        if(x1.h != null)
        {
            x1.h.a(l1, (M.y - S) + x1.g[0][1]);
            G.addElement(x1.h);
        }
        if(x1.a.length() > Q.length)
            Q = new char[x1.a.length()];
        x1.a.getChars(0, x1.a.length(), Q, 0);
        V.a(U);
        a(g1, U);
        j2 = 0;
        if(!flag1) goto _L10; else goto _L9
_L9:
        M.x = l1;
        M.y += x1.g[j2][1];
        a(g1, Q, i2, x1.g[j2][0], M.x, M.y, V);
        if(L != x1.g[j2][1] || M.x > super.a - 20)
        {
            b(x1);
            return;
        }
        i2 = x1.g[j2][0];
        j2++;
_L10:
        if(j2 < x1.f) goto _L9; else goto _L8
_L8:
        k1;
        H.size();
_L6:
        JVM INSTR icmpge 781;
           goto _L11 _L12
_L11:
        continue; /* Loop/switch isn't completed */
_L12:
        break; /* Loop/switch isn't completed */
        if(M.y < super.b) goto _L7; else goto _L13
_L13:
    }

    public void a(String s1)
    {
        H.removeAllElements();
        K = 0;
        J.setValue(0);
        m();
    }

    public void a(String s1, String s2, int i1)
    {
        c(new x(s1, s2, i1));
    }

    private v b(int i1, int j1)
    {
        int k1 = 0;
        if(!a.q) goto _L2; else goto _L1
_L1:
        v v1 = (v)G.elementAt(k1);
        if(v1.a(I, i1, j1))
            return v1;
        k1++;
_L2:
        if(k1 >= G.size())
            return null;
        if(true) goto _L1; else goto _L3
_L3:
    }

    private x c(int i1, int j1)
    {
        int k1;
        boolean flag;
label0:
        {
            flag = a.q;
            k1 = 0;
            j1 -= 3;
            if(O >= 0)
            {
                k1 = O;
                if(!flag)
                    break label0;
            }
            return null;
        }
_L6:
        if(k1 < H.size()) goto _L2; else goto _L1
_L1:
        E = -1;
        this;
        if(flag) goto _L4; else goto _L3
_L3:
        repaint();
        return null;
_L2:
        H.elementAt(k1);
_L4:
        (x);
        x x1;
        x1;
        if(x1.d + x1.c > j1)
            break; /* Loop/switch isn't completed */
        k1++;
        if(!flag) goto _L6; else goto _L5
_L5:
        E = k1;
        repaint();
        return (x)H.elementAt(E);
    }

    public void c()
    {
        if(l)
        {
            if(n != null)
                n.a();
            if(n != null && n.c)
                m();
        }
    }

    private void a(Graphics g1, char ac[], int i1, int j1, int k1, int l1, y y1)
    {
        boolean flag;
        flag = a.q;
        M.x = k1;
        L = S;
        if(!flag) goto _L2; else goto _L1
_L1:
        int i2 = a(ac, i1, j1);
        if(i2 < 0)
            i2 = j1;
        if(Y != null)
            Y.f += new String(ac, i1, i2 - i1);
        int j2 = a.r.a(k, ac, i1, i2);
        if(g1 != null && l1 > -5 && l1 < super.b + 20)
        {
            g1.drawChars(ac, i1, i2 - i1, M.x, l1);
            if(y1.e)
                g1.drawLine(M.x, l1 + 1, M.x + j2, l1 + 1);
        }
        M.x += j2;
        if(i2 >= 0 && i2 < j1)
        {
            i1 = a(g1, ac, i2, j1, y1);
            if(!flag)
                continue; /* Loop/switch isn't completed */
        }
        i1 = i2;
_L2:
        if(i1 < j1) goto _L1; else goto _L3
_L3:
    }

    private void a(Graphics g1, y y1)
    {
        short word0;
label0:
        {
            boolean flag = a.q;
            word0 = x ? y1.c : U.c;
            if(!y)
                y1 = U;
            if(!y1.d && !y1.f)
                y1.b = 0;
            if(y1.d && !y1.f)
            {
                y1.b = 1;
                if(!flag)
                    break label0;
            }
            if(!y1.d && y1.f)
            {
                y1.b = 2;
                if(!flag)
                    break label0;
            }
            if(y1.d && y1.f)
                y1.b = 3;
        }
        if(g1 != null)
        {
            g1.setFont(a.r.a(y1.a, y1.b, R));
            g1.setColor(r.e[word0]);
        }
        k = getFontMetrics(a.r.a(y1.a, y1.b, R));
    }

    public void keyPressed(KeyEvent keyevent)
    {
        boolean flag = a.q;
        int i1 = keyevent.getKeyCode();
        if(r && E >= 0 && E < H.size())
        {
            x x1 = (x)H.elementAt(E);
            switch(i1)
            {
            default:
                break;

            case 65: // 'A'
                j.a(this, 5, x1.a, x1.e, E);
                if(!flag)
                    break;
                // fall through

            case 68: // 'D'
                l();
                if(!flag)
                    break;
                // fall through

            case 83: // 'S'
                j.a(this, 6, x1.a, x1.e, E);
                if(!flag)
                    break;
                // fall through

            case 69: // 'E'
                j.a(this, 4, x1.a, x1.e, E);
                if(!flag)
                    break;
                // fall through

            case 38: // '&'
                if(E > 0)
                {
                    E--;
                    J.setValue(J.getValue() - x1.c);
                    m();
                    return;
                }
                if(!flag)
                    break;
                // fall through

            case 40: // '('
                if(E < H.size() - 1)
                {
                    E++;
                    J.setValue(J.getValue() + x1.c);
                    repaint();
                    return;
                }
                break;
            }
        }
        switch(i1)
        {
        case 37: // '%'
        case 39: // '\''
        default:
            break;

        case 36: // '$'
            J.setValue(0);
            if(!flag)
                break;
            // fall through

        case 35: // '#'
            J.setValue(J.getMaximum());
            if(!flag)
                break;
            // fall through

        case 33: // '!'
            J.setValue(J.getValue() - super.b);
            if(!flag)
                break;
            // fall through

        case 34: // '"'
            J.setValue(J.getValue() + super.b);
            if(!flag)
                break;
            // fall through

        case 38: // '&'
            J.setValue(J.getValue() - 30);
            if(!flag)
                break;
            // fall through

        case 40: // '('
            J.setValue(J.getValue() + 30);
            break;
        }
        m();
    }

    public void mouseReleased(MouseEvent mouseevent)
    {
    }

    public void a(boolean flag, String as[])
    {
        FontMetrics fontmetrics;
        int i1;
        boolean flag1;
        flag1 = a.q;
        A = as;
        B = new String();
        D = new int[as.length];
        C = 0;
        fontmetrics = getFontMetrics(a.r.a(0, 1, 1));
        i1 = 0;
        if(!flag1) goto _L2; else goto _L1
_L1:
        B += as[i1] + b("Nc\r");
        D[i1] = fontmetrics.stringWidth(as[i1] + b("Nc\r"));
        C += D[i1];
_L4:
        i1++;
_L2:
        if(i1 < as.length)
            continue; /* Loop/switch isn't completed */
        C += 10;
        s = flag;
        e();
        repaint();
        if(!flag1)
            return;
        if(true) goto _L4; else goto _L3
_L3:
        if(true) goto _L1; else goto _L5
_L5:
    }

    private int a(x x1)
    {
        short word0;
        int i1;
        int j1;
        int l1;
        boolean flag;
        flag = a.q;
        word0 = 0;
        i1 = 0;
        j1 = 0;
        l1 = 4;
        x1.b = false;
        if(x1.h != null)
            x1.h.a(-1000, 0, getFontMetrics(a.r.a(0, 1, R)).stringWidth(x1.h.f), S);
        if(r && s)
            l1 = C;
        W.a(U);
        a(((Graphics) (null)), U);
        if(x1.a.length() > Q.length)
            Q = new char[x1.a.length()];
        x1.a.getChars(0, x1.a.length(), Q, 0);
        if(!flag) goto _L2; else goto _L1
_L1:
        L = S;
        a(Q, j1, x1.a.length(), l1);
_L5:
        int k1;
        k1;
label0:
        {
            if(k1 > 0)
            {
                j1 = k1;
                if(!flag)
                    break label0;
            }
            if(!flag)
                break; /* Loop/switch isn't completed */
        }
        P[word0][0] = k1;
        P[word0++][1] = L;
        i1 += L;
_L2:
        if(j1 < x1.a.length()) goto _L1; else goto _L3
_L3:
        x1.a(P, word0);
        x1.c = i1;
        i1;
        if(flag) goto _L5; else goto _L4
_L4:
        return;
    }

    public Vector d()
    {
        return H;
    }

    public boolean imageUpdate(Image image, int i1, int j1, int k1, int l1, int i2)
    {
        w w1;
        boolean flag1;
        flag1 = a.q;
        if(!l)
            return false;
        if((i1 & 0x80) != 0 || (i1 & 0x40) != 0)
            return false;
        w1 = (w)F.get(image);
        if(w1 == null || w1.h != I)
            return false;
        long l2 = System.currentTimeMillis();
        if(l2 - w1.i < 20L && i1 == 16)
            try
            {
                Thread.sleep(100L);
            }
            catch(Exception _ex) { }
        w1.i = l2;
        if(!z)
            return true;
        k k2 = this;
        JVM INSTR monitorenter ;
        Graphics g1;
        int j2;
        g1 = getGraphics();
        if(g1 == null)
        {
            boolean flag = true;
            return flag;
        }
        g1.setColor(Color.white);
        j2 = 0;
        if(!flag1) goto _L2; else goto _L1
_L1:
        w1.g.elementAt(j2);
_L5:
        (Point);
        Point point;
        point;
        g1.fillRect(point.x, point.y, ((v) (w1)).c, ((v) (w1)).d);
        g1.drawImage(image, point.x, point.y, this);
        j2++;
_L2:
        if(j2 < w1.g.size()) goto _L1; else goto _L3
_L3:
        a.r.a(g1, 0, 0, super.a, super.b, false);
        g1;
        if(flag1) goto _L5; else goto _L4
_L4:
        dispose();
        break MISSING_BLOCK_LABEL_272;
        k2;
        JVM INSTR monitorexit ;
        throw ;
        local;
        k2;
        JVM INSTR monitorexit ;
        JVM INSTR ret 14;
        return true;
    }

    public void mouseEntered(MouseEvent mouseevent)
    {
    }

    public void mouseExited(MouseEvent mouseevent)
    {
        setCursor(Cursor.getPredefinedCursor(0));
    }

    private int a(Graphics g1, char ac[], int i1, int j1, y y1)
    {
        int k1;
        boolean flag;
        flag = a.q;
        k1 = i1 + 1;
        if(i1 > j1 - 2)
            return k1;
        ac[i1];
        JVM INSTR tableswitch 1 8: default 814
    //                   1 225
    //                   2 72
    //                   3 265
    //                   4 814
    //                   5 305
    //                   6 645
    //                   7 814
    //                   8 804;
           goto _L1 _L2 _L3 _L4 _L1 _L5 _L6 _L1 _L7
_L1:
        break; /* Loop/switch isn't completed */
_L3:
        switch(ac[i1 + 1])
        {
        case 1: // '\001'
            y1.d = true;
            if(!flag)
                break MISSING_BLOCK_LABEL_208;
            // fall through

        case 2: // '\002'
            y1.d = false;
            if(!flag)
                break MISSING_BLOCK_LABEL_208;
            // fall through

        case 4: // '\004'
            y1.f = true;
            if(!flag)
                break MISSING_BLOCK_LABEL_208;
            // fall through

        case 5: // '\005'
            y1.f = false;
            if(!flag)
                break MISSING_BLOCK_LABEL_208;
            // fall through

        case 14: // '\016'
            y1.e = true;
            if(!flag)
                break MISSING_BLOCK_LABEL_208;
            // fall through

        case 15: // '\017'
            y1.e = false;
            if(!flag)
                break MISSING_BLOCK_LABEL_208;
            // fall through

        default:
            i1--;
            break;
        }
        a(g1, y1);
        k1 = i1 + 2;
        if(!flag)
            break; /* Loop/switch isn't completed */
_L2:
        if(ac[i1 + 1] < r.e.length)
        {
            y1.c = (short)ac[i1 + 1];
            a(g1, y1);
            k1 = i1 + 2;
        }
        if(!flag)
            break; /* Loop/switch isn't completed */
_L4:
        if(ac[i1 + 1] < r.l.length)
        {
            y1.a = (short)ac[i1 + 1];
            a(g1, y1);
            k1 = i1 + 2;
        }
        if(!flag)
            break; /* Loop/switch isn't completed */
_L5:
        Image image;
        int l1;
        String s1;
        image = null;
        l1 = a.r.a(ac, '\005', i1 + 1, j1);
        if(l1 < 0)
            break; /* Loop/switch isn't completed */
        s1 = new String(ac, i1 + 1, l1 - i1 - 1);
        if(s1.indexOf(b("@1\002")) != -1)
            break; /* Loop/switch isn't completed */
        image = j.a(s1, false);
        if(image == null) goto _L9; else goto _L8
_L8:
        int i2;
        int k2;
        i2 = image.getWidth(null);
        k2 = image.getHeight(null);
        if(L < k2)
            L = k2;
        if(g1 == null || M.y + 5 <= 0 || M.y - k2 >= super.b) goto _L11; else goto _L10
_L10:
        w w1 = (w)F.get(image);
        if(w1 == null) goto _L13; else goto _L12
_L12:
        if(q && w1.h != I)
            G.addElement(w1);
        w1.b(I, M.x, (M.y - k2) + 5);
        if(!flag) goto _L14; else goto _L13
_L13:
        w w2;
        F.put(image, w2 = new w(s1, I, M.x, (M.y - k2) + 5, i2, k2));
        if(q)
            G.addElement(w2);
_L14:
        g1.drawImage(image, M.x, (M.y - k2) + 5, this);
_L11:
        M.x += i2;
_L9:
        k1 = l1 + 1;
        if(!flag)
            break; /* Loop/switch isn't completed */
_L6:
label0:
        {
            if(g1 == null)
                break label0;
            if(ac[i1 + 1] == '\001')
            {
                int j2 = a.r.a(ac, '\006', i1 + 2, j1);
                if(j2 < 0)
                    j2 = j1;
                if(j2 > i1 + 2)
                {
                    String s2 = new String(ac, i1 + 2, j2 - i1 - 2);
                    Y = new v("", (short)2, M.x, M.y - S, k.stringWidth(s2), S);
                }
                if(!flag)
                    break label0;
            }
            if(ac[i1 + 1] == '\002' && Y != null)
            {
                G.addElement(Y);
                Y = null;
            }
        }
        k1 = i1 + 2;
        if(!flag)
            break; /* Loop/switch isn't completed */
_L7:
        k1 = i1 + 1;
        if(!flag);
        return k1;
    }

    public void a(u u1)
    {
        n = new t(u1);
    }

    public void setBounds(int i1, int j1, int k1, int l1)
    {
        T = true;
        super.setBounds(i1, j1, k1, l1);
        J.setBounds(k1 - 18, 2, 16, l1 - 4);
        J.setBlockIncrement(l1 - 3);
        J.setValue(J.getMaximum());
    }

    public void a(boolean flag, boolean flag1, boolean flag2)
    {
        z = flag;
        x = flag1;
        y = flag2;
        j();
    }

    public void b(boolean flag)
    {
        l = flag;
        if(!l && m != null)
            m.b(this);
    }

    public void a(Image image)
    {
        o = image;
    }

    public void a(Image image, int i1)
    {
        o = image;
        p = i1;
    }

    private synchronized void e()
    {
        int i1;
        int j1;
        boolean flag;
        flag = a.q;
        i1 = 0;
        j1 = 0;
        if(!flag) goto _L2; else goto _L1
_L1:
        i1 += a((x)H.elementAt(j1));
_L4:
        j1++;
_L2:
        if(j1 < H.size())
            continue; /* Loop/switch isn't completed */
        K = i1;
        h();
        if(!flag)
            return;
        if(true) goto _L4; else goto _L3
_L3:
        if(true) goto _L1; else goto _L5
_L5:
    }

    public synchronized x a(int i1)
    {
        int j1;
        boolean flag;
        flag = a.q;
        j1 = 0;
        if(!flag) goto _L2; else goto _L1
_L1:
        j1++;
_L2:
        if(j1 >= H.size()) goto _L4; else goto _L3
_L3:
        ((x)H.elementAt(j1)).e;
        i1;
        if(flag) goto _L6; else goto _L5
_L5:
        JVM INSTR icmpne 12;
           goto _L4 _L1
_L4:
        if(H.size() == 0)
            break MISSING_BLOCK_LABEL_70;
        j1;
        H.size();
_L6:
        JVM INSTR icmpne 72;
           goto _L7 _L8
_L7:
        break MISSING_BLOCK_LABEL_70;
_L8:
        break MISSING_BLOCK_LABEL_72;
        return null;
        x x1;
label0:
        {
            x1 = (x)H.elementAt(j1);
            H.removeElementAt(j1);
            K -= x1.c;
            if(E > j1)
            {
                E--;
                if(!flag)
                    break label0;
            }
            if(E == j1)
                E = -1;
        }
        c(false);
        J.setValue(J.getValue() - x1.c);
        repaint();
        return x1;
    }

    public x f()
    {
        if(E < 0 || E >= H.size())
            return null;
        else
            return (x)H.elementAt(E);
    }

    public void adjustmentValueChanged(AdjustmentEvent adjustmentevent)
    {
        m();
    }

    public void mouseClicked(MouseEvent mouseevent)
    {
        if(mouseevent.getClickCount() >= 2 && mouseevent.getX() > C && r)
        {
            x x1 = c(mouseevent.getX(), mouseevent.getY());
            if(x1 != null)
                j.a(this, 6, x1.a, x1.e, E);
        }
    }

    public void mousePressed(MouseEvent mouseevent)
    {
label0:
        {
            x x1;
label1:
            {
                boolean flag;
label2:
                {
                    flag = a.q;
                    requestFocus();
                    v v1 = b(mouseevent.getX(), mouseevent.getY());
                    if(v && v1 != null)
                    {
                        j.a(this, v1.e, v1.f, mouseevent.getX(), mouseevent.getY());
                        if(v1.e == 0)
                            setCursor(Cursor.getDefaultCursor());
                        if(!flag)
                            break label0;
                    }
                    if(!r)
                        break label0;
                    x1 = c(mouseevent.getX(), mouseevent.getY());
                    if(x1 == null)
                        return;
                    if(!s || mouseevent.getX() >= C - 10)
                        break label1;
                    if(mouseevent.getX() > D[0] + D[1])
                    {
                        j.a(this, 5, x1.a, x1.e, E);
                        if(!flag)
                            break label2;
                    }
                    if(mouseevent.getX() > D[0])
                    {
                        l();
                        if(!flag)
                            break label2;
                    }
                    j.a(this, 6, x1.a, x1.e, E);
                }
                E = -1;
                if(!flag)
                    break label0;
            }
            if(mouseevent.getModifiers() == 4 || r.u)
                j.a(this, 5, x1.a, x1.e, E);
        }
    }

    public void mouseDragged(MouseEvent mouseevent)
    {
    }

    public k(s s1, q q1)
    {
        this(s1);
        m = q1;
    }

    public void keyTyped(KeyEvent keyevent)
    {
        keyevent.consume();
    }

    public void mouseMoved(MouseEvent mouseevent)
    {
label0:
        {
            boolean flag = a.q;
            if(!v)
                break label0;
            if(b(mouseevent.getX(), mouseevent.getY()) != null)
            {
                setCursor(Cursor.getPredefinedCursor(12));
                if(!flag)
                    break label0;
            }
            if(r && s && mouseevent.getX() < C - 10 && mouseevent.getY() <= K + 2)
            {
                setCursor(Cursor.getPredefinedCursor(12));
                if(!flag)
                    break label0;
            }
            setCursor(Cursor.getPredefinedCursor(0));
        }
    }

    public k(s s1)
    {
        boolean flag = a.q;
        super();
        l = true;
        n = null;
        q = false;
        r = false;
        s = false;
        t = true;
        u = false;
        v = true;
        w = false;
        x = true;
        y = true;
        A = null;
        B = null;
        C = 0;
        E = -1;
        I = 0;
        K = 0;
        L = 0;
        N = 0;
        O = -1;
        R = 1;
        S = 0;
        T = false;
        U = new y();
        V = new y();
        W = new y();
        j = s1;
        M = new Point(0, 0);
        J = new Scrollbar(1);
        add(J);
        J.setMinimum(0);
        J.setValue(-1);
        J.setUnitIncrement(30);
        J.addAdjustmentListener(this);
        K = 0;
        H = new Vector();
        F = new Hashtable();
        G = new Vector();
        S = r.j[R] + 4;
        P = new int[20][2];
        Q = new char[512];
        addKeyListener(this);
        addMouseListener(this);
        addMouseMotionListener(this);
        if(flag)
        {
            int i1 = i.i;
            i.i = ++i1;
        }
    }

    public void g()
    {
        J.setValue(J.getMaximum());
        m();
    }

    public synchronized void paint(Graphics g1)
    {
        Graphics g2;
        int i1;
        int j1;
        int k1;
        boolean flag;
label0:
        {
            flag = a.q;
            if(!l)
                return;
            if(m != null)
            {
                g2 = m.a(this, super.a, super.b);
                if(!flag)
                    break label0;
            }
            g2 = a(super.a, super.b, true);
        }
        if(T)
        {
            T = false;
            if(super.a != N)
                e();
            N = super.a;
            c(true);
        }
        g2.setColor(Color.white);
        g2.fillRect(0, 0, super.a, super.b);
        if(o == null)
            break MISSING_BLOCK_LABEL_313;
        if(p != 2)
            break MISSING_BLOCK_LABEL_235;
        i1 = 1 + super.a / o.getWidth(null);
        j1 = 1 + super.b / o.getHeight(null);
        k1 = 0;
        if(!flag) goto _L2; else goto _L1
_L1:
        int l1 = 0;
        if(!flag) goto _L4; else goto _L3
_L3:
        g2.drawImage(o, k1 * o.getWidth(null), l1 * o.getHeight(null), null);
        l1++;
_L4:
        if(l1 < j1) goto _L3; else goto _L5
_L5:
        k1++;
_L2:
        if(k1 < i1) goto _L1; else goto _L6
_L6:
        break MISSING_BLOCK_LABEL_313;
        if(p == 1)
        {
            g2.drawImage(o, 0, 0, super.a, super.b, null);
            if(!flag)
                break MISSING_BLOCK_LABEL_313;
        }
        g2.drawImage(o, (super.a - 18 - o.getWidth(null)) / 2, (super.b - 2 - o.getHeight(null)) / 2, null);
label1:
        {
            if(n != null)
            {
                n.a(g2, super.a - 18, super.b - 2);
                if(super.a > 55)
                    a(g2, 4, -J.getValue());
                v v1 = n.b();
                if(v1 != null)
                    G.addElement(v1);
                if(!flag)
                    break label1;
            }
            if(super.a > 55)
                a(g2, 4, 2 - J.getValue());
        }
label2:
        {
            a.r.a(g2, 0, 0, super.a, super.b, false);
            if(m != null)
            {
                g1.drawImage(m.a(this), 0, 0, null);
                if(!flag)
                    break label2;
            }
            g1.drawImage(b(), 0, 0, null);
        }
        g1.dispose();
        return;
    }

    private int a(char ac[], int i1, int j1)
    {
_L5:
        i1++;
        if(i1 >= j1) goto _L2; else goto _L1
_L1:
        ac[i1];
        16;
        if(a.q) goto _L4; else goto _L3
_L3:
        JVM INSTR icmpgt 3;
           goto _L2 _L5
_L2:
        i1;
        j1;
_L4:
        JVM INSTR icmplt 32;
           goto _L6 _L7
_L6:
        break MISSING_BLOCK_LABEL_30;
_L7:
        break MISSING_BLOCK_LABEL_32;
        return -1;
        return i1;
    }

    public void a()
    {
        b(false);
        if(n != null)
            n = null;
        if(H != null)
            H.removeAllElements();
        if(F != null)
        {
            F.clear();
            F = null;
        }
        j = null;
        if(m != null)
            m = null;
        super.a();
    }

    public synchronized void b(int i1)
    {
        R = i1;
        S = r.j[R] + 4;
        T = true;
        repaint();
    }

    public void keyReleased(KeyEvent keyevent)
    {
        keyevent.consume();
    }

    private void h()
    {
        c(J.getValue() >= J.getMaximum() - 50);
    }

    private void c(boolean flag)
    {
        J.setMaximum((K - super.b) + 10);
        if(flag)
            J.setValue(J.getMaximum());
    }

    public String i()
    {
        StringBuffer stringbuffer;
        String s2;
        int k1;
        boolean flag;
        flag = a.q;
        stringbuffer = new StringBuffer();
        s2 = b("kj\0");
        k1 = 0;
        if(!flag) goto _L2; else goto _L1
_L1:
        String s1;
        int i1;
        i1 = -2;
        s1 = a.r.c(((x)H.elementAt(k1)).a);
        if(!flag) goto _L4; else goto _L3
_L3:
        s1;
_L10:
        5;
        i1 + 2;
        indexOf();
        int j1;
        j1;
        j1;
        i1;
_L7:
        JVM INSTR icmple 131;
           goto _L5 _L4
_L5:
        j1;
        i1 + 20;
        if(flag) goto _L7; else goto _L6
_L6:
        JVM INSTR icmpge 131;
           goto _L8 _L4
_L8:
        s1.substring(0, i1 + 1) + b("\033lHp") + s1.substring(j1);
        if(flag) goto _L10; else goto _L9
_L9:
        s1;
_L4:
        if((i1 = s1.indexOf(s2, i1 + 2)) > -1) goto _L3; else goto _L11
_L11:
        stringbuffer.append(s1);
        stringbuffer.append("\n");
        if(flag) goto _L4; else goto _L12
_L12:
        k1++;
_L2:
        if(k1 >= H.size())
            return stringbuffer.toString();
        if(true) goto _L1; else goto _L13
_L13:
    }

    private int a(char ac[], int i1, int j1, int k1)
    {
        int j2;
        boolean flag;
        flag = a.q;
        j2 = i1;
        M.x = k1;
        if(super.a <= 55)
            return j1;
        if(!flag) goto _L2; else goto _L1
_L1:
        a(ac, j2, j1);
_L13:
        int l1;
        l1;
        int i2;
        int k2;
        if(l1 < 0)
            l1 = j1;
        i2 = a.r.a(k, ac, j2, l1);
        if(M.x + i2 <= super.a - 25)
            break MISSING_BLOCK_LABEL_208;
        k2 = l1;
        if(!flag) goto _L4; else goto _L3
_L3:
        l1 = a.r.a(ac, ' ', l1 - 1);
_L4:
        if(j2 >= l1) goto _L6; else goto _L5
_L5:
        M.x + a.r.a(k, ac, j2, l1);
        super.a - 25;
        if(flag) goto _L8; else goto _L7
_L7:
        JVM INSTR icmpgt 94;
           goto _L6 _L3
_L6:
        j2;
        l1;
_L8:
        JVM INSTR icmpge 158;
           goto _L9 _L10
_L9:
        break MISSING_BLOCK_LABEL_155;
_L10:
        break MISSING_BLOCK_LABEL_158;
        return l1;
        for(l1 = k2; l1 > j2 && M.x + a.r.a(k, ac, j2, --l1) > super.a - 25;);
        return l1;
        M.x += i2;
        if(u && ac[l1] == '\n')
            return l1 + 1;
        if(l1 < j1)
        {
            int l2 = L;
            j2 = a(null, ac, l1, j1, W);
            if(M.x > super.a - 25)
            {
                L = l2;
                return l1;
            }
            if(!flag)
                continue; /* Loop/switch isn't completed */
        }
        j2 = j1;
_L2:
        if(j2 < j1) goto _L1; else goto _L11
_L11:
        j2;
        if(flag || flag) goto _L13; else goto _L12
_L12:
        return;
    }

    private void b(x x1)
    {
        int i1 = x1.c;
        int j1 = a(x1);
        K += j1 - i1;
        h();
        m();
    }

    public void j()
    {
        e();
        m();
    }

    public int k()
    {
        return H.size();
    }

    public synchronized x l()
    {
        if(E < 0 || E >= H.size())
            return null;
        K -= ((x)H.elementAt(E)).c;
        x x1 = (x)H.elementAt(E);
        H.removeElementAt(E);
        j.a(this, 7, x1.a, x1.e, E);
        if(E >= H.size())
            E = H.size() - 1;
        c(false);
        repaint();
        return x1;
    }

    public void m()
    {
        repaint(2, 2, super.a - 20, super.b - 4);
    }

    public void a(String s1, String s2)
    {
        c(new x(s1, s2, 0));
    }

    public synchronized void c(x x1)
    {
        boolean flag = false;
        if(J.getValue() >= J.getMaximum() - 100)
            flag = true;
        if(H.size() > 0 && K == 0)
            T = true;
        int i1 = a(x1);
        x1.c = i1;
        H.addElement(x1);
        if(!r && !q && H.size() > 1000)
        {
            K -= ((x)H.elementAt(0)).c;
            H.removeElementAt(0);
        }
        K += i1;
        c(flag && t);
        if(H.size() == 1 && r)
            E = 0;
        if(K - super.b - i1 < J.getValue())
            m();
    }

    private static String b(String s1)
    {
        char ac[] = s1.toCharArray();
        int i1 = ac.length;
        int k1;
        for(int j1 = 0; j1 < i1; j1++)
        {
            switch(j1 % 5)
            {
            case 0: // '\0'
                k1 = 0x6e;
                break;

            case 1: // '\001'
                k1 = 31;
                break;

            case 2: // '\002'
                k1 = 45;
                break;

            case 3: // '\003'
                k1 = 2;
                break;

            default:
                k1 = 61;
                break;
            }
            ac[j1] ^= k1;
        }

        return new String(ac);
    }

    s j;
    FontMetrics k;
    boolean l;
    q m;
    t n;
    Image o;
    int p;
    public boolean q;
    public boolean r;
    public boolean s;
    public boolean t;
    public boolean u;
    public boolean v;
    public boolean w;
    boolean x;
    boolean y;
    static boolean z = false;
    String A[];
    String B;
    int C;
    int D[];
    int E;
    Hashtable F;
    Vector G;
    Vector H;
    int I;
    Scrollbar J;
    int K;
    int L;
    Point M;
    int N;
    int O;
    int P[][];
    char Q[];
    int R;
    int S;
    boolean T;
    y U;
    y V;
    y W;
    static final Color X = new Color(230, 230, 230);
    v Y;

}
