// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   b.java

package b;

import a.i;
import a.r;
import d.m;
import java.io.*;
import java.net.Socket;
import java.util.zip.InflaterInputStream;

public class b
    implements Runnable
{

    void a()
    {
        i();
        k();
    }

    private boolean b()
    {
        try
        {
            l = new Socket(c, f);
            m = l.getOutputStream();
            n = l.getInputStream();
            h = true;
            i = false;
            return true;
        }
        catch(Exception exception)
        {
            i();
            exception.printStackTrace();
            return false;
        }
    }

    public boolean a(int i1)
    {
        return d == i1;
    }

    void c()
    {
        s = true;
        t = false;
        w = 0;
        x = System.currentTimeMillis() - v;
    }

    public void d()
    {
label0:
        {
            w++;
            if(!s)
            {
                long l1 = System.currentTimeMillis() - v;
                if(l1 > x)
                    x = l1;
                if(!t && w > 200)
                {
                    t = true;
                    a.a('#');
                }
                if(w > 400)
                    s = true;
                if(!y)
                    break label0;
            }
            if(w >= 100)
            {
                w = 0;
                s = false;
                v = System.currentTimeMillis();
                a('T');
            }
        }
    }

    public b(m m1, String s1, int i1, int j1)
    {
        boolean flag = y;
        super();
        d = -1;
        f = 0;
        g = 0;
        h = false;
        i = false;
        j = true;
        k = true;
        l = null;
        m = null;
        n = null;
        s = true;
        t = false;
        u = false;
        v = 0L;
        w = 0;
        a = m1;
        c = s1;
        f = i1;
        d = j1;
        o = new byte[3];
        p = new byte[300];
        q = new byte[100];
        if(flag)
        {
            int k1 = i.i;
            i.i = ++k1;
        }
    }

    public boolean e()
    {
        return h;
    }

    public static long f()
    {
        return x;
    }

    public static String a(byte abyte0[], int i1)
    {
        StringBuffer stringbuffer = new StringBuffer();
        try
        {
            ByteArrayInputStream bytearrayinputstream = new ByteArrayInputStream(abyte0, 0, i1);
            InflaterInputStream inflaterinputstream = new InflaterInputStream(bytearrayinputstream);
            do
            {
                int j1 = inflaterinputstream.read();
                if(j1 == -1)
                    break;
                stringbuffer.append((char)j1);
            } while(!y);
            inflaterinputstream.close();
            return stringbuffer.toString();
        }
        catch(Exception _ex)
        {
            return null;
        }
    }

    void g()
    {
        i();
        g = 0;
        o = null;
        p = null;
        q = null;
    }

    public int h()
    {
        return d;
    }

    private void i()
    {
        h = false;
        i = true;
        try
        {
            if(l != null)
                l.close();
            if(n != null)
                n.close();
            if(m != null)
                m.close();
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
    }

    public void a(char c1)
    {
        a(c1, ((String) (null)));
    }

    public void a(char c1, String s1)
    {
        j = true;
        int i1 = s1 == null ? 3 : s1.length() + 3;
        if(m != null && h)
        {
            if(q.length < i1)
                q = new byte[i1];
            if(s1 != null)
                a.r.a(s1, q, 3);
            q[0] = (byte)(i1 & 0xff);
            q[1] = (byte)(i1 >> 8 & 0xff);
            q[2] = (byte)c1;
            if(r.a)
                a.r.a(d + b("\026\0066kR\fu?`X\fu") + i1 + b("\032u0jRsoS") + (byte)c1 + b("\032u>vQ\f") + s1, s1);
            try
            {
                m.write(q, 0, i1);
                m.flush();
            }
            catch(IOException ioexception)
            {
                ioexception.printStackTrace();
                if(h)
                    a.a('!');
                i();
            }
        }
    }

    private boolean j()
    {
        String s1;
        boolean flag1;
        flag1 = y;
        boolean flag = false;
        s1 = new String();
        int i1;
        int j1;
        int k1;
        int l1;
        k1 = n.read(o, 0, 3);
        if(k1 < 3 || !h)
        {
            if(h)
                a.a('!');
            i();
            return false;
        }
        i1 = o[1] << 8 & 0xffff | o[0] & 0xff;
        j1 = o[2] & 0xff;
        if(i1 < 3)
        {
            if(h)
                a.a('!');
            i();
            return false;
        }
        if(p.length < i1 - 3)
            p = new byte[i1 - 3];
        if(j1 == 155)
        {
            c();
            return true;
        }
        if(i1 <= 3)
            break MISSING_BLOCK_LABEL_309;
        l1 = 0;
        if(!flag1) goto _L2; else goto _L1
_L1:
        k1 = n.read();
        k1;
        -1;
_L8:
        JVM INSTR icmpeq 192;
           goto _L3 _L4
_L3:
        if(h) goto _L5; else goto _L4
_L4:
        if(h)
            a.a('!');
        i();
        return false;
_L5:
        p[l1] = (byte)k1;
        l1++;
_L2:
        if(l1 < i1 - 3) goto _L1; else goto _L6
_L6:
        j1;
        139;
        if(flag1) goto _L8; else goto _L7
_L7:
        JVM INSTR icmpne 270;
           goto _L9 _L10
_L9:
        break MISSING_BLOCK_LABEL_246;
_L10:
        break MISSING_BLOCK_LABEL_270;
        s1 = a(p, i1 - 3);
        if(s1 == null)
            return true;
        if(!flag1)
            break MISSING_BLOCK_LABEL_309;
        if(j1 == 154)
        {
            a('S', a.r.a(p, 0, i1 - 3));
            return true;
        }
        s1 = a.r.a(p, 0, i1 - 3);
        if(r.a)
            a.r.a(d + b("\026\0076fS\177\0036a6z\020=\0376") + i1 + b("\032u0jRsoS") + j1 + b("\032u>vQ\fu") + s1 + b("\026\027*qS\fu"), s1);
        if(h)
            a.a(j1, s1, this);
        break MISSING_BLOCK_LABEL_432;
        Exception exception;
        exception;
        exception.printStackTrace();
        if(h)
        {
            a.a('!');
            i();
        }
        return false;
        return true;
    }

    void k()
    {
        b = new Thread(this, b("u=\022Q;U:\036HcX<\020Db_:\035\005") + d);
        b.start();
    }

    void a(String s1)
    {
        b.setName(s1);
    }

    public void run()
    {
        if(!b())
            a.a(' ');
        if(!y) goto _L2; else goto _L1
_L1:
        try
        {
            Thread.sleep(1L);
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
        j();
_L2:
        if(!h || b == null)
            return;
        if(true) goto _L1; else goto _L3
_L3:
    }

    public void b(int i1)
    {
        f = i1;
    }

    public int l()
    {
        return f;
    }

    private static String b(String s1)
    {
        char ac[] = s1.toCharArray();
        int i1 = ac.length;
        int k1;
        for(int j1 = 0; j1 < i1; j1++)
        {
            switch(j1 % 5)
            {
            case 0: // '\0'
                k1 = 0x36;
                break;

            case 1: // '\001'
                k1 = 85;
                break;

            case 2: // '\002'
                k1 = 115;
                break;

            case 3: // '\003'
                k1 = 37;
                break;

            default:
                k1 = 22;
                break;
            }
            ac[j1] ^= k1;
        }

        return new String(ac);
    }

    m a;
    private Thread b;
    String c;
    int d;
    public byte e[];
    int f;
    public int g;
    boolean h;
    public boolean i;
    boolean j;
    public boolean k;
    private Socket l;
    private OutputStream m;
    private InputStream n;
    byte o[];
    byte p[];
    byte q[];
    static final int r = 100;
    boolean s;
    boolean t;
    public boolean u;
    long v;
    int w;
    static long x = 0L;
    public static boolean y;

}
